WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
dunder_ident = @{ "__" ~ ASCII_ALPHA+ ~ "__"? }

term = _{
    number |
    string |
    function_call_term |
    ident |
    paren_expression

}

number = @{ int ~ ("." ~ ASCII_DIGIT*)? }
int = @{ "-"? ~ ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

member_access = { ident ~ ("." ~ ident)+ | ident ~ "." ~ ident }

member_function_call = { ident ~ "." ~ ident ~ "(" ~ (param_list | arg_list)? ~ ")" }


add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
eq = { "==" }
neq = { "!=" }
gt = { ">" }
lt = { "<" }
gte = { ">=" }
lte = { "<=" }

operator = _{
    add | subtract | multiply | divide |
    eq | neq | gt | lt | gte | lte |
    "and" | "or" | "not"
}

binary_op = {   "+" | "-" | "*" | "/"   }
BinOperation = { (member_access | term) ~ operator ~ expression }
KEYWORD_DEF = { "fn" }
KEYWORD_IF = { "if" }
KEYWORD_ELSE = { "else" }
KEYWORD_FOR = { "for" }
KEYWORD_WHILE = { "while" }
KEYWORD_CLASS = { "class" }

block = { "{" ~ (statement)* ~ "}" }

class_def = { KEYWORD_CLASS ~ ident ~ block }

class_instantiation = { ident ~ "(" ~ term? ~ ")" ~ ";"}

param_list = { expression ~ ("," ~ expression)* }

arg_list = { "(" ~ (ident ~ ("," ~ ident)*)? ~ ")" }

expression = {
     (member_access) ~ (operator ~ (member_access | term))* |
     term ~ (operator ~ (member_access | term))*
}

paren_expression = { "(" ~ expression ~ ")" }

function_def = { KEYWORD_DEF ~ (dunder_ident | ident) ~ ( arg_list | param_list) ~ block }

function_call = { ident ~ "(" ~ param_list? ~ ")" ~ ";"}

function_call_term = { ident ~ "(" ~ param_list? ~ ")" }

function_call_stmt = { (ident~"."~ function_call | function_call | class_instantiation) }

return_statement = { "return" ~  expression ~ ";" }

assignment_statement = { (member_access | ident) ~ "=" ~ (term ~ ";" | function_call_stmt ) }

print_statement = { "print" ~ "(" ~ (param_list | function_call_stmt) ~ ")" ~ ";" }

if_statement = { KEYWORD_IF ~ expression ~ block ~ (KEYWORD_ELSE ~ block)? }

for_statement = { KEYWORD_FOR ~ expression ~ block }

while_statement = { KEYWORD_WHILE ~ expression ~ block }

basic_statement = _{
    assignment_statement |
    print_statement |
    return_statement |
    function_call |
    function_call_stmt
}

compound_statement = _{
    if_statement |
    for_statement |
    while_statement |
    function_def |
    class_def
}

statement = {
    basic_statement |
    compound_statement
}

program = { SOI ~ (statement)* ~ EOI }